generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  active
  disabled
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum PaymentMethod {
  credit_card
  debit_card
  paypal
  stripe
  bank_transfer
  cash_on_delivery
}

enum CoupounConditions {
  first_user
  purchase_coupoun
}

enum Roles {
  SUPER_ADMIN // full system control
  ADMIN // manage store operations
  STORE_MANAGER // manage products, orders, users (limited)
  PRODUCT_MANAGER // manage product catalog
  ORDER_MANAGER // handle orders, shipping, refunds
  INVENTORY_MANAGER // stock & warehouse management
  CUSTOMER_SUPPORT // handle customer queries & disputes
  MARKETING_MANAGER // manage coupons, campaigns, promotions
  FINANCE // accounting, payments, reports
  VENDOR // seller in a marketplace model
  DELIVERY // delivery personnel / logistics
  AFFILIATE // partners / affiliates
  CUSTOMER // registered buyer
  GUEST // unregistered visitor
}

model User {
  id                   String                @id @default(uuid()) @map("id")
  name                 String                @map("name")
  email                String                @unique @map("email")
  phone                String?               @map("phone")
  status               UserStatus            @default(active) @map("status")
  role                 Roles                 @default(CUSTOMER)
  profilePicture       String?               @map("profile_picture")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  password             String?               @map("password")
  CustomerProfile      CustomerProfile?
  AdminProfile         AdminProfile?
  DeliveryAgentProfile DeliveryAgentProfile?
  UserOtp              UserOtp?
  CartItem             CartItem[]
  Order                Order[]
  Address              Address[]
  Review               Review[]
  CouponUsage          CouponUsage[]

  @@map("users")
}

model CustomerProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  addresses    Address[]
  reviews      Review[]
  couponUsages CouponUsage[]
  UserOtp      UserOtp[]
  orders       Order[]
  cart         CartItem[]
}

model AdminProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  notes String? // any internal notes about the admin
}

model DeliveryAgentProfile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  vehicleNumber   String? // vehicle plate number
  vehicleType     String? // e.g. "bike", "van"
  assignedArea    String? // delivery region
  availability    Boolean @default(true) // online/offline
  rating          Float? // customer rating avg
  totalDeliveries Int     @default(0) // completed deliveries
  currentOrders   Order[] // deliveries assigned
}

model UserOtp {
  id        String   @id @default(uuid())
  userId    String   @unique
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user              User             @relation(fields: [userId], references: [id])
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  customerProfileId String?

  @@index([userId])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  sku          String   @unique
  barcode      String?
  weight       Decimal? @db.Decimal(8, 2)
  dimensions   String?
  isActive     Boolean  @default(true)
  isFeatured   Boolean  @default(false)
  categoryId   String
  brandId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category   Category         @relation(fields: [categoryId], references: [id])
  brand      Brand            @relation(fields: [brandId], references: [id])
  images     ProductImage[]
  variants   ProductVariant[]
  inventory  Inventory[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  url       String
  altText   String?
  isMain    Boolean @default(false)
  sortOrder Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  name      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  sku       String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Inventory {
  id        String  @id @default(uuid())
  productId String
  quantity  Int
  reserved  Int     @default(0)
  location  String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  customerProfileId String?

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id                String      @id @default(uuid())
  userId            String
  orderNumber       String      @unique
  status            OrderStatus @default(pending)
  totalAmount       Decimal     @db.Decimal(10, 2)
  shippingCost      Decimal     @default(0) @db.Decimal(10, 2)
  taxAmount         Decimal     @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal     @default(0) @db.Decimal(10, 2)
  notes             String?
  shippingAddressId String?
  billingAddressId  String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user                   User                  @relation(fields: [userId], references: [id])
  items                  OrderItem[]
  payments               Payment[]
  shippingAddress        Address?              @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress         Address?              @relation("BillingAddress", fields: [billingAddressId], references: [id])
  CustomerProfile        CustomerProfile?      @relation(fields: [customerProfileId], references: [id])
  customerProfileId      String?
  DeliveryAgentProfile   DeliveryAgentProfile? @relation(fields: [deliveryAgentProfileId], references: [id])
  deliveryAgentProfileId String?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(uuid())
  orderId         String
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  status          PaymentStatus @default(pending)
  transactionId   String?
  gatewayResponse Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  type       String // 'shipping' or 'billing'
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders    Order[]          @relation("ShippingAddress")
  billingOrders     Order[]          @relation("BillingAddress")
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  customerProfileId String?

  @@map("addresses")
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  rating     Int // 1-5 stars
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  customerProfileId String?

  @@unique([userId, productId])
  @@map("reviews")
}

model Brand {
  id              String   @id @default(uuid())
  name            String
  slug            String   @unique
  description     String?
  logoUrl         String?
  bannerUrl       String?
  website         String?
  country         String?
  foundedYear     Int?
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation
  products Product[]
}

model Coupon {
  id                     String            @id @default(uuid())
  coupon_code            String            @unique
  condition              CoupounConditions @default(purchase_coupoun)
  description            String
  minimum_purchase_value Decimal           @default(0) @db.Decimal(10, 2)
  discount_amount        Decimal           @default(0) @db.Decimal(10, 2)
  usage_limit_per_person Int               @default(1)
  is_valid               Boolean           @default(true)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt

  usages CouponUsage[]
}

model CouponUsage {
  id       String   @id @default(uuid())
  userId   String
  couponId String
  usedAt   DateTime @default(now())

  user              User             @relation(fields: [userId], references: [id])
  coupon            Coupon           @relation(fields: [couponId], references: [id])
  CustomerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  customerProfileId String?
}
